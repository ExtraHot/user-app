// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using user_app.Context;

#nullable disable

namespace user_app.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230510212158_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("user_app.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_group_id");

                    b.Property<Guid?>("UserGroupId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_state_id");

                    b.Property<Guid?>("UserStateId1")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserGroupId1");

                    b.HasIndex("UserStateId");

                    b.HasIndex("UserStateId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("user_app.Models.UserGroup", b =>
                {
                    b.Property<Guid>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_group_id");

                    b.Property<int>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.HasKey("UserGroupId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            UserGroupId = new Guid("02f83e73-a729-4248-8a63-98472896253f"),
                            Code = 1,
                            Description = "Admin role"
                        },
                        new
                        {
                            UserGroupId = new Guid("dd8735ae-0711-4e0c-960f-e10629fea835"),
                            Code = 0,
                            Description = "User role"
                        });
                });

            modelBuilder.Entity("user_app.Models.UserState", b =>
                {
                    b.Property<Guid>("UserStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_state_id");

                    b.Property<int>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.HasKey("UserStateId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UserStates");

                    b.HasData(
                        new
                        {
                            UserStateId = new Guid("4940fe7e-8ade-42f6-b311-b7d86d1acc0e"),
                            Code = 0,
                            Description = "Active user status"
                        },
                        new
                        {
                            UserStateId = new Guid("75542e5b-3d6a-4541-8e75-e49ae7824e9c"),
                            Code = 1,
                            Description = "Blocked user status"
                        });
                });

            modelBuilder.Entity("user_app.Models.User", b =>
                {
                    b.HasOne("user_app.Models.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user_app.Models.UserGroup", null)
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId1");

                    b.HasOne("user_app.Models.UserState", "UserState")
                        .WithMany()
                        .HasForeignKey("UserStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("user_app.Models.UserState", null)
                        .WithMany("Users")
                        .HasForeignKey("UserStateId1");

                    b.Navigation("UserGroup");

                    b.Navigation("UserState");
                });

            modelBuilder.Entity("user_app.Models.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("user_app.Models.UserState", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
